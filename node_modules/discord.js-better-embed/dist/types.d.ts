import type { Client, ColorResolvable, MessageEmbedOptions } from 'discord.js';
export declare type AnyObject = Record<string, any>;
export declare type Template<V extends AnyObject | undefined = AnyObject> = Partial<MessageEmbedOptions> & (V extends undefined ? {} : {
    values?: V;
});
export declare type CheckSizeKey = keyof Template | string;
export declare type CheckSizeContent = Template[keyof Template];
export declare type TemplatesValues = {
    basic: BasicTemplate;
    color: ColorTemplate;
    complete: CompleteTemplate;
    image: ImageTemplate;
    [k: string]: Template;
};
interface ColorTemplate extends Template<{
    color?: ColorResolvable;
}> {
    color: ColorResolvable;
}
interface BasicTemplate extends Template<{
    client: Client;
}> {
    footer: {
        text: string;
        iconURL: string;
    };
    timestamp: Date;
}
declare type CompleteTemplate = BasicTemplate & ColorTemplate & Template<{
    description?: string;
    title?: string;
}> & {
    description: string;
    title: string;
};
declare type ImageTemplate = CompleteTemplate & Template<{
    url?: string;
}> & {
    image: {
        url: string;
    };
};
export {};
