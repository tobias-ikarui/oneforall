import { MessageAttachment, MessageEmbed } from 'discord.js';
import { AnyObject, CheckSizeContent, CheckSizeKey, Template, TemplatesValues } from './types';
export declare const templates: TemplatesValues;
export declare const limits: {
    author: {
        name: number;
    };
    title: number;
    description: number;
    footer: {
        text: number;
    };
    fields: {
        size: number;
        name: number;
        value: number;
    };
};
export declare type Templates = typeof templates;
declare type ValuesFromTemplateKey<T extends string, P = Templates[T]> = P extends Template<infer V> ? V : {};
declare type Values<T extends string | Template> = T extends Template<infer V> ? V : T extends string ? ValuesFromTemplateKey<T> : AnyObject | undefined;
export declare class BetterEmbed extends MessageEmbed {
    static LENGTH_LIMITS: {
        author: {
            name: number;
        };
        title: number;
        description: number;
        footer: {
            text: number;
        };
        fields: {
            size: number;
            name: number;
            value: number;
        };
    };
    static TEMPLATES: TemplatesValues;
    constructor(data?: MessageEmbed | Template);
    static isTemplate(key: string): key is keyof Templates & string;
    static fromTemplate<T extends (keyof Templates & string) | Template, V extends AnyObject | undefined = Values<T>>(template: T, values?: V): BetterEmbed;
    checkSize(field: 'fields'): ({
        index: number;
        limit: number;
    } & ({
        name: boolean;
    } | {
        value: boolean;
    })) | boolean;
    checkSize(field: keyof Template): boolean;
    checkSize(): {
        [k in CheckSizeKey]: {
            content: CheckSizeContent;
            limit: number;
        };
    };
    setImageFromFile(attachment: MessageAttachment): void;
    setThumbnailFromFile(attachment: MessageAttachment): void;
    throwIfTooLong(field: keyof Template): void;
    cutIfTooLong(): void;
}
export {};
