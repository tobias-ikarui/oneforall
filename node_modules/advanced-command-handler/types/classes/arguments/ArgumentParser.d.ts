import { Parser } from 'argumentorum';
import { MaybePromise } from '../../types';
import { CommandContext } from '../contexts';
import { CommandError } from '../errors';
import { CommandArgument } from './Argument';
export declare type MapArguments<A extends any[]> = Map<string, null | CommandError | A[number]>;
export declare type ArgumentResolved<A> = null | CommandError | A;
export declare class ArgumentParser {
    args: CommandArgument<any>[];
    rawArgs: string[];
    static errors: {
        invalidArgument: (argumentName: string) => string;
        argumentNotFound: (argumentName: string) => string;
        argumentRequiresOneValue: (argumentName: string) => string;
        errorInArgument: (argumentName: string) => string;
    };
    parsed?: Map<string, MaybePromise<CommandError | null | any>>;
    parser: Parser;
    constructor(args: CommandArgument<any>[], rawArgs: string[]);
    private static invalidArgumentError;
    private static argumentNotFoundError;
    private static argumentRequiresOneValueError;
    private static errorInArgumentError;
    parseArguments<A extends any[]>(context: CommandContext): Promise<void>;
    resolveArgument<A>(commandContext: CommandContext, name: string): Promise<ArgumentResolved<A>>;
    resolveArguments<A extends any[]>(context: CommandContext): Promise<MapArguments<A>>;
}
