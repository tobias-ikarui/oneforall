"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readJSON = exports.saveJSON = void 0;
const fs = __importStar(require("fs"));
const _1 = require("./");
/**
 * Saves a JSON-Like object into a JSON file.
 *
 * @param path - The path of the JSON file.
 * @param content - The content to save.
 * @returns - True if operation has successfully worked.
 */
function saveJSON(path, content) {
    if (!fs.existsSync(path)) {
        _1.Logger.warn(`Cannot save JSON content to '${path}', file not found.`, 'JSONWriter');
        return false;
    }
    const stringified = JSON.stringify(content, null, '\t');
    if (content.length === 0) {
        _1.Logger.warn(`Cannot save JSON content to '${path}', content is empty.`, 'JSONWriter');
        return false;
    }
    fs.writeFile(path, stringified, err => {
        if (err)
            _1.Logger.error(`Cannot save JSON content to '${path}', error:\n${err.stack}`, 'JSONWriter');
        return false;
    });
    return true;
}
exports.saveJSON = saveJSON;
/**
 * Reads a JSON through its path.
 *
 * @remarks
 * Prefer using `import` or `require`.
 * @typeParam O - The type of the JSON if any.
 * @param path - The path to the JSON file.
 * @returns - The JSON.
 */
function readJSON(path) {
    const bufferedData = fs.readFileSync(path);
    return JSON.parse(bufferedData.toString('utf8'));
}
exports.readJSON = readJSON;
