"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThing = exports.DataType = void 0;
const discord_js_1 = require("discord.js");
const __1 = require("../");
var DataType;
(function (DataType) {
    DataType["CHANNEL"] = "channel";
    DataType["COMMAND"] = "command";
    DataType["EMOTE"] = "emote";
    DataType["GUILD"] = "guild";
    DataType["MEMBER"] = "member";
    DataType["MESSAGE"] = "message";
    DataType["ROLE"] = "role";
    DataType["TEXT_CHANNEL"] = "text_channel";
    DataType["USER"] = "user";
})(DataType = exports.DataType || (exports.DataType = {}));
/**
 * Finds the data from a string or a Message and returns null if nothing found.
 *
 * @typeParam T - The DataType you want.
 * @param dataType - The data type {@link DataType}.
 * @param text - A string or a Message to find dataType from.
 * @returns - The Data found or null if not found.
 */
async function getThing(dataType, text) {
    let message;
    if (text instanceof discord_js_1.Message) {
        message = text;
        text = text.content;
    }
    else
        message = null;
    const client = __1.CommandHandler.client;
    switch (dataType) {
        case DataType.COMMAND:
            return __1.CommandHandler.findCommand(text) ?? null;
        case DataType.CHANNEL:
            return (client?.channels.cache.get(text) ??
                message?.mentions.channels.first() ??
                client?.channels.cache.find(c => (c instanceof discord_js_1.GuildChannel && c.name.toLowerCase().includes(text.toLowerCase()) && text.toString().length > 1) ||
                    (c instanceof discord_js_1.DMChannel && c.recipient.username.toLowerCase().includes(text.toLowerCase()) && text.toString().length > 2) ||
                    c.toString() === text.toString().replace(/<#(\d{17,19})>/, '<@$1>') ||
                    false) ??
                client?.channels.resolve(text) ??
                null);
        case DataType.EMOTE:
            return (client?.emojis.cache.get(text) ??
                client?.emojis.cache.find(e => (e.name?.toLowerCase().includes(text.toLowerCase()) && text.length > 1) ?? false) ??
                discord_js_1.Util.resolvePartialEmoji(text) ??
                null);
        case DataType.GUILD:
            return (client?.guilds.cache.get(text) ??
                client?.guilds.cache.find(g => g.name.toLowerCase().includes(text.toLowerCase()) && text.length > 1) ??
                client?.guilds.resolve(text) ??
                message?.mentions.guild ??
                null);
        case DataType.MEMBER:
            return (message?.guild?.members.cache.get(text) ??
                message?.mentions?.members?.first() ??
                message?.guild?.members.cache.find(m => ((m.displayName.toLowerCase().includes(text.toLowerCase()) ||
                    m.user.username.toLowerCase().includes(text.toLowerCase())) &&
                    text.length > 1) ||
                    m.toString() === text.toString().replace(/<@!?(\d{17,19})>/, '<@$1>')) ??
                message?.guild?.members.resolve(text) ??
                null);
        case DataType.MESSAGE:
            const m = await message?.channel.messages.fetch(text);
            if (m)
                return m;
            const url = text.replace(/https:\/\/((canary|ptb).)?discord.com\/channels\//, '').split('/');
            const channels = client?.channels.cache;
            if (text.startsWith('https') && channels?.has(url[1])) {
                return (await channels?.filter(c => c.isText()).get(url[1])?.messages.fetch(url[2])) || null;
            }
            if (channels) {
                for (const [_, channel] of channels) {
                    const m = await channel.messages.fetch(text);
                    if (m)
                        return m;
                }
            }
            return null;
        case DataType.TEXT_CHANNEL:
            const result = client?.channels.cache.filter(c => (0, __1.isTextChannelLike)(c)).get(text) ??
                message?.mentions.channels.filter(c => (0, __1.isTextChannelLike)(c)).first() ??
                client?.channels.cache.find(c => ((0, __1.isTextChannelLike)(c) && c.name.toLowerCase().includes(text.toLowerCase()) && text.toString().length > 1) ||
                    c.toString() === text.toString().replace(/<#(\d{17,19})>/, '<@$1>') ||
                    false) ??
                client?.channels.resolve(text) ??
                null;
            return (0, __1.isTextChannelLike)(result) ? result : null;
        case DataType.ROLE:
            return (message?.guild?.roles.cache.get(text) ??
                message?.mentions.roles.first() ??
                message?.guild?.roles.cache.find(r => (r.name.toLowerCase().includes(text.toLowerCase()) && text.length > 1) ||
                    r.toString() === text.toString().replace(/<@&(\d{17,19})>/, '<@$1>')) ??
                message?.guild?.roles.resolve(text) ??
                null);
        case DataType.USER:
            return (client?.users.cache.get(text) ??
                client?.users.cache.find(u => u.username.toLowerCase() === text.toLowerCase() || u.toString() === text.toString().replace(/<@!?(\d{17,19})>/, '<@$1>')) ??
                message?.mentions?.users.first() ??
                client?.users.resolve(text) ??
                null);
        default:
            return null;
    }
}
exports.getThing = getThing;
