"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubCommandContext = void 0;
const arguments_1 = require("../arguments");
const CommandContext_1 = require("./CommandContext");
/**
 * @see {@link https://ayfri.gitbook.io/advanced-command-handler/concepts/commands/context}
 */
class SubCommandContext extends CommandContext_1.CommandContext {
    /**
     * Creates a new SubCommandContext associated to a SubCommand.
     *
     * @param options - The options of this context.
     */
    constructor(options) {
        super(options);
        this.subCommand = options.subCommand;
    }
    /**
     * Returns the list of arguments of the SubCommand.
     */
    get arguments() {
        return Object.entries(this.subCommand.arguments).map((a, index) => new arguments_1.CommandArgument(a[0], index, a[1]));
    }
    /**
     * Resolves all of the arguments of the SubCommand.
     * If an argument has an error it will return a {@link CommandError}.
     *
     * @typeParam T - The type of the arguments as an union.
     * @returns - A map of arguments or undefined if the SubCommand has no arguments.
     */
    async resolveArguments() {
        if (this.subCommand.arguments)
            this.argumentParser = new arguments_1.ArgumentParser(this.arguments, this.rawArgs);
        return this.argumentParser?.resolveArguments(this);
    }
    /**
     * Returns the name of the subCommand associated to this SubCommandContext.
     */
    get subCommandName() {
        return this.subCommand.name;
    }
}
exports.SubCommandContext = SubCommandContext;
