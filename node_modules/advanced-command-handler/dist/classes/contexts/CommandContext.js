"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandContext = void 0;
const discord_js_1 = require("discord.js");
const __1 = require("../../");
const commands_1 = require("../../defaults/commands");
const arguments_1 = require("../arguments");
/**
 * @see {@link https://ayfri.gitbook.io/advanced-command-handler/concepts/commands/context}
 */
class CommandContext {
    /**
     * Creates a new CommandContext associated to a Command.
     *
     * @param options - The options of the CommandContext.
     */
    constructor(options) {
        this.command = options.command;
        this.message = options.message;
        this.handler = options.handler;
        this.rawArgs = options.rawArgs;
    }
    /**
     * The old list of raw arguments.
     *
     * @deprecated - Use {@link CommandContext#rawArgs} instead.
     */
    get args() {
        return this.rawArgs;
    }
    /**
     * Returns the arguments joined with a space between each.
     */
    get argsString() {
        return this.rawArgs.join(' ');
    }
    /**
     * Returns the list of arguments of the command.
     */
    get arguments() {
        return Object.entries(this.command.arguments).map((a, index) => new arguments_1.CommandArgument(a[0], index, a[1]));
    }
    /**
     * Returns the channel where the command was executed.
     */
    get channel() {
        return this.message.channel;
    }
    /**
     * Returns the client.
     */
    get client() {
        return this.handler.client;
    }
    /**
     * Returns the name of the command executed.
     */
    get commandName() {
        return this.command.name;
    }
    /**
     * Returns the content of the message.
     */
    get content() {
        return this.message.content;
    }
    /**
     * Returns the guild of the message.
     */
    get guild() {
        return this.message.guild;
    }
    /**
     * Returns true if the arguments are calling a SubCommand.
     */
    get isCallingASubCommand() {
        const aliases = this.command.subCommandsNamesAndAliases;
        const longestAliasLength = Math.max(...aliases.map(a => a.split(/\s+/).length));
        return aliases.includes(this.rawArgs.slice(0, longestAliasLength).join(' '));
    }
    /**
     * Returns the member of the message, `null` if executed in private messages.
     */
    get member() {
        return this.message.member;
    }
    /**
     * Returns the prefix used in the message.
     */
    get prefix() {
        return this.handler.getPrefixFromMessage(this.message);
    }
    /**
     * Returns the channel where the command was executed as a TextChannel or undefined if it isn't.
     */
    get textChannel() {
        return this.message.channel instanceof discord_js_1.TextChannel || this.message.channel instanceof discord_js_1.NewsChannel ? this.message.channel : undefined;
    }
    /**
     * Returns the channel where the command was executed as a ThreadChannel or undefined if it isn't.
     */
    get thread() {
        return this.message.channel.isThread() ? this.message.channel : undefined;
    }
    /**
     * Returns the author of the message.
     */
    get user() {
        return this.message.author;
    }
    /**
     * Returns an argument.
     * If the argument is errored or not found it will return `null`.
     *
     * @typeParam T - The type of the argument.
     * @param name - The name of the argument.
     * @returns - The argument in a promise or null if the argument is not found or errored or the command has no arguments.
     */
    async argument(name) {
        const result = await this.resolveArgument(name);
        return result instanceof __1.CommandError ? null : result ?? null;
    }
    /**
     * Delete multiple messages from a channel.
     *
     * @param number - The number of messages to delete, or a collection of messages, or an array of Messages or IDs.
     * @param filterOld - Filter messages to remove those, which are older than two weeks automatically.
     * @returns - The collection of the deleted messages.
     */
    async bulkDeleteInChannel(number, filterOld) {
        if (this.textChannel) {
            return this.textChannel.bulkDelete(number, filterOld);
        }
    }
    /**
     * Create a Thread, returns undefined if already in a Thread.
     *
     * @param options - The options of the Thread.
     * @returns - The resulting Thread.
     */
    createThread(options) {
        if (this.channel.isThread())
            return undefined;
        return this.message.startThread(options);
    }
    /**
     * Deletes the message with an optional timeout.
     *
     * @param timeout - The time to wait in milliseconds before deleting the message.
     * @returns - The deleted message.
     */
    async deleteMessage(timeout = 0) {
        if (timeout) {
            return await new Promise(resolve => {
                setTimeout(() => {
                    resolve(this.message.delete());
                }, timeout);
            });
        }
        else
            return await this.message.delete();
    }
    /**
     * Add one or multiple reactions to a message.
     *
     * @remarks React in the order of emoji used.
     * @param emoji - The emoji to react with, can be custom or native.
     */
    async react(...emoji) {
        for (const e of emoji) {
            await this.message.react(e);
        }
    }
    /**
     * Remove all the reactions.
     */
    async removeAllReactions() {
        await this.message.reactions.removeAll();
    }
    /**
     * Remove one or multiple reactions from emojis.
     *
     * @param emojis - The list of emoji reactions to remove.
     */
    async removeReaction(...emojis) {
        for (const emoji of emojis) {
            await this.message.reactions.resolve(typeof emoji === 'object' ? emoji.id : emoji).remove();
        }
    }
    /**
     * Remove one or multiple reactions from the bot.
     *
     * @param emojis - The emojis the bot has to remove reaction from.
     */
    async removeSelfReaction(...emojis) {
        for (const e of emojis) {
            await this.message.reactions.resolve(typeof e === 'object' ? e.id : e).users.remove(this.client.user.id);
        }
    }
    /**
     * Reply to the message in the channel.
     *
     * @param content - The content, or embed, or object with an embed/content/attachments.
     * @param options - The options.
     * @returns - The message sent.
     */
    reply(content, options) {
        if (typeof content !== 'string')
            options = content;
        else if (content && options)
            options.content === content;
        else if (content && !options)
            options = { content };
        if (options && options.embed && !options.embeds)
            options.embeds = [options.embed];
        return this.message.reply(options ?? '');
    }
    /**
     * Resolves one of the argument.
     * If the argument is errored it will return a {@link CommandError}.
     *
     * @remarks Internally it uses {@link resolveArguments}.
     * @typeParam T - The type of the argument.
     * @param name - The name of the argument.
     * @returns - The result of the argument maybe in a promise or undefined if no arguments with this name exists or the command has no arguments.
     */
    resolveArgument(name) {
        if (this.argumentParser?.parsed)
            return this.argumentParser.parsed.get(name);
        return this.argumentParser?.resolveArgument(this, name);
    }
    /**
     * Resolves all of the arguments of the command.
     * If an argument has an error it will return a {@link CommandError}.
     *
     * @typeParam T - The type of the arguments as an union.
     * @returns - A map of arguments or undefined if the command has no arguments.
     */
    async resolveArguments() {
        if (this.command.arguments)
            this.argumentParser = new arguments_1.ArgumentParser(this.arguments, this.rawArgs);
        return this.argumentParser?.resolveArguments(this);
    }
    /**
     * Send a message in the channel.
     *
     * @param content - The content, or embed, or object with an embed/content/attachments.
     * @param options - The options.
     * @returns - The message sent.
     */
    send(content, options) {
        if (typeof content !== 'string')
            options = content;
        else if (content && options)
            options.content === content;
        else if (content && !options)
            options = { content };
        if (options && options.embed && !options.embeds)
            options.embeds = [options.embed];
        return this.channel.send(options ?? '');
    }
    /**
     * Sends the help menu from the default `HelpCommand` command (even if you are not using it).
     *
     * @returns - The message of the help menu.
     */
    sendGlobalHelpMessage() {
        return commands_1.HelpCommand.sendGlobalHelp(this);
    }
    /**
     * Sends the help menu of the command from the default `HelpCommand` command (even if you are not using it).
     *
     * @param commandName - The name of the command to send the help menu.
     * @returns - The message of the help menu of the command.
     */
    sendHelpMessage(commandName = this.commandName) {
        return commands_1.HelpCommand.sendCommandHelp(this, this.handler.commands.get(commandName));
    }
}
exports.CommandContext = CommandContext;
