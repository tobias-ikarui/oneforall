"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandArgument = exports.Argument = exports.ArgumentType = void 0;
/**
 * The arguments types.
 * You can add your own if you want to add arguments types.
 */
var ArgumentType;
(function (ArgumentType) {
    ArgumentType["BOOLEAN"] = "boolean";
    ArgumentType["CHANNEL"] = "channel";
    ArgumentType["COMMAND"] = "command";
    ArgumentType["CHOICE"] = "choice";
    ArgumentType["EMOJI"] = "emoji";
    ArgumentType["ENUM"] = "enum";
    ArgumentType["EVENT"] = "event";
    ArgumentType["FLOAT"] = "float";
    ArgumentType["GUILD"] = "guild";
    ArgumentType["GUILD_MEMBER"] = "guild_member";
    ArgumentType["INTEGER"] = "integer";
    ArgumentType["MESSAGE"] = "message";
    ArgumentType["REGEX"] = "regex";
    ArgumentType["ROLE"] = "role";
    ArgumentType["SNOWFLAKE"] = "snowflake";
    ArgumentType["STRING"] = "string";
    ArgumentType["TEXT_CHANNEL"] = "text_channel";
    ArgumentType["USER"] = "user";
})(ArgumentType = exports.ArgumentType || (exports.ArgumentType = {}));
class Argument {
    constructor(type, options, validator, parser) {
        this.type = type;
        this.options = options;
        this.validator = validator;
        this.parser = parser;
    }
}
exports.Argument = Argument;
class CommandArgument {
    constructor(name, index, argument) {
        this.name = name;
        this.index = index;
        this.validate = argument.validator;
        this.coalescing = argument.options.coalescing ?? false;
        this.defaultValue = argument.options.defaultValue ?? undefined;
        this.description = argument.options.description ?? '';
        this.optional = argument.options.optional ?? false;
        this.type = argument.type;
        this.parse = argument.parser;
    }
    /**
     * Is the argument not optional, doesn't have any default value and only takes one word.
     *
     * @returns - Is the argument simple.
     */
    get isSimple() {
        return !this.optional && !this.coalescing && !this.defaultValue;
    }
    /**
     * Is the argument optional or has a default value.
     *
     * @returns - Does the argument can be skipped.
     */
    get isSkipable() {
        return this.optional || !!this.defaultValue;
    }
}
exports.CommandArgument = CommandArgument;
