"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandError = exports.CommandErrorType = void 0;
const CommandHandlerError_1 = require("./CommandHandlerError");
var CommandErrorType;
(function (CommandErrorType) {
    CommandErrorType[CommandErrorType["ARGUMENT_NOT_FOUND"] = 0] = "ARGUMENT_NOT_FOUND";
    CommandErrorType[CommandErrorType["CLIENT_MISSING_PERMISSIONS"] = 1] = "CLIENT_MISSING_PERMISSIONS";
    CommandErrorType[CommandErrorType["COOLDOWN"] = 2] = "COOLDOWN";
    CommandErrorType[CommandErrorType["ERROR"] = 3] = "ERROR";
    CommandErrorType[CommandErrorType["INVALID_ARGUMENT"] = 4] = "INVALID_ARGUMENT";
    CommandErrorType[CommandErrorType["MISSING_TAGS"] = 5] = "MISSING_TAGS";
    CommandErrorType[CommandErrorType["USER_MISSING_PERMISSIONS"] = 6] = "USER_MISSING_PERMISSIONS";
    CommandErrorType[CommandErrorType["WRONG_CHANNEL"] = 7] = "WRONG_CHANNEL";
})(CommandErrorType = exports.CommandErrorType || (exports.CommandErrorType = {}));
class CommandError extends CommandHandlerError_1.CommandHandlerError {
    /**
     * Creates a new CommandError.
     *
     * @see {@link CommandErrorType} to see what those errors are related to.
     * @see {@link Command#validate} to see when those errors can occur.
     * @param options - The options of the error, containing type and raw data.
     */
    constructor(options) {
        super(options.message, 'CommandExecution');
        this.name = 'CommandError';
        this.type = options.type;
        this.data = options.data ?? {};
    }
}
exports.CommandError = CommandError;
